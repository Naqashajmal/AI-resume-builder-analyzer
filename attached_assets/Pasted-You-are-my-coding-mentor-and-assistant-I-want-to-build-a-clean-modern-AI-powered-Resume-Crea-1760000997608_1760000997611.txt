You are my coding mentor and assistant.

I want to build a **clean, modern, AI-powered Resume Creator and Analyzer** using **only simple technologies ‚Äî no React, Next.js, or other frameworks.**
Use **HTML, CSS, and JavaScript (vanilla)**, and if needed, Node.js for backend API calls.

üß© Project Requirements:
1. The app should have a **beautiful and clean single-page UI**:
   - Title: ‚ÄúAI Resume Creator & Analyzer‚Äù
   - Tabs or sections: ‚ÄúCreate Resume‚Äù and ‚ÄúAnalyze Resume‚Äù
   - Use minimal modern design (centered layout, smooth shadows, rounded boxes, soft colors, elegant fonts).
   - Add mobile responsiveness using pure CSS or flexbox/grid.

2. **Resume Creator:**
   - Simple form fields: Name, Contact Info, Education, Experience, Skills, Achievements, Objective.
   - On clicking ‚ÄúGenerate Resume‚Äù, it should call my AI API (OpenAI or Gemini ‚Äî let me choose via an input box).
   - Send the data to the API and generate a **professionally formatted resume text**.
   - Show the result on screen beautifully.
   - Option to **Download as PDF** using jsPDF or html2pdf.

3. **Resume Analyzer:**
   - Allow me to upload a resume text or paste it into a textbox.
   - On clicking ‚ÄúAnalyze‚Äù, it calls my chosen AI API and asks for:
     - Skills extracted
     - Strengths
     - Weaknesses
     - Suggestions for improvement
     - Suggested job titles
   - Display results neatly in sections with icons or colored boxes.

4. **API Flexibility:**
   - Include a small settings area where I can input my API key.
   - Let me choose which AI model to use (OpenAI GPT or Gemini).
   - Teach me how to safely store and load API keys for local testing.

5. **Teach me as we build:**
   - At every step, explain what you‚Äôre doing and why.
   - Show me how to run and test locally in Replit.
   - Explain what each important line of code does, briefly.
   - When using external libraries, explain their purpose.

6. **Backend (if needed):**
   - Use Node.js with Express (only if required) to handle API proxying.
   - Otherwise, keep everything front-end and simple.

7. **Deployment:**
   - Show me how to deploy it (on Replit or Vercel, or any quick hosting).
   - Make sure it works just by opening the live link.

8. **Polish:**
   - Add smooth transitions and hover effects.
   - Add a small footer: ‚ÄúMade with ‚ù§Ô∏è by Naqash Malik‚Äù.
   - Make sure everything loads fast and looks professional.

üéØ Key Notes:
- No React, Vue, or frameworks.
- Just HTML, CSS, JS (and Node if required).
- AI integration using either OpenAI API or Gemini API.
- Include comments in code so I can learn.
- Clean folder structure:
  /public  
  /css  
  /js  
  /server.js (if using Node)
  /index.html

Start by planning the folder structure, then code step-by-step and explain everything.
At the end, test it fully and show me how to customize prompts and text.

Let‚Äôs begin.
